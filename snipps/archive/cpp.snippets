extends c

#
# ultisnipps args
#
# [ b ] beginning of line
# [ i ] in-word expansion
# [ w ] word boundary


#
# doc
#
snippet "cdoc" "→ class doc" w
/**
 * @file "${1:`vim_snippets#Filename("$1.h")`}":
 *    Image capture from a kinect device.
 *
 * @b Description
 *    Captures rgb, point cloud, and depth data,
 *    providing an interface for these captures.
 *
 * @b Rationale
 *    The Capture Class abstracts and simplifies
 *    interface to captured image data. It also
 *    centralizes encapsulates the core kinect
 *    device operations.
 *
 * @b Resource
 *    Implementation base on example provided
 *    in Azure-Kinect-Sensor-SDK doc:
 *    https://github.com/microsoft//tree/develop/examples/fastpointcloud
 *
 * @b Notes
 *    Last major revision date: `!v strftime("%Y-%m-%d %H:%M")`
 *    @version: 1.1
 *    @author : Everett M.
 */
endsnippet


#
# logging
#
snippet "msg" "→ std:: string msg" w
std::string msg ="${1:}";
endsnippet

snippet "log" "→ LOG(x)" w
LOG(msg);
endsnippet



#
#
#
#
#
#
# snippet todo "→ todo" w
# /**
#  * todo: ${1}
#  * date: `!v strftime("%Y-%m-%d %H:%M")`
#  */
# endsnippet
#
#
# snippet ref "→ reference" w
# /**
#  * $1
#  * see:
#  * $2
#  * date: `!v strftime("%Y-%m-%d %H:%M")`
#  */
# endsnippet
#
#
# snippet "fdoc" "→ function doc" w
# /**
#  * ${1:function}
#  *   ${2:One line description}
#  *
#  * @param ${3}
#  *   ${4:Description of parameter foo including valid range and (any) error checking.}
#  *
#  * @retval ${5}
#  *   ${6: Description of return value of this method.}
#  */
# endsnippet
#
#
#
# snippet "bdoc" "→ block comment doc" w
# /** ${1:Sysntax}:
#  *   ${2:Block description.}
#  */
#
# endsnippet
#
#
# # GLOG:
# snippet "iglog" "+ google logger" w
# #include <glog/logging.h>
# #include <gflags/gflags.h>
# endsnippet
#
#
# snippet "info" "+ glog info" w
# LOG(INFO) << $1 ;
# endsnippet
#
# snippet "warn" "+ glog warning" w
# LOG(WARNING) << $1 ;
# endsnippet
#
# snippet "err" "+ glog error" w
# LOG(ERROR) << $1 ;
# endsnippet
#
# snippet "fatal" "+ glog fatal" w
# LOG(FATAL) << $1 ;
# endsnippet
#
# snippet "dfatal" "+ glog dfatal" w
# LOG(DFATAL) << $1 ;
# endsnippet
#
#
# # INCLUDES:
# snippet "ivector" "→ #include <vector> " b
# #include <vector>
# endsnippet
#
# snippet "iiostream" "→ #include <iostream> " b
# #include <iostream>
# endsnippet
#
# snippet "iarray" "→ #include <array> " b
# #include <array>
# endsnippet
#
# snippet "iglog" "→ #include <glog/logging.h> " b
# #include <gflags/gflags.h>
# #include <glog/logging.h>
# endsnippet
#
# snippet "icmath" "→ #include <cmath>" b
# #include <cmath>
# endsnippet
#
# snippet "iexception" "→ #include <exception>" b
# #include <exception>
# endsnippet
#
# snippet "imap" "→ #include <unordered_map>" b
# #include <unordered_map>
# endsnippet
#
# snippet "istack" "→ #include <stack>" b
# #include <stack>
# endsnippet
#
# snippet "ialgorithm" "→ #include <algorithm>" b
# #include <algorithm>
# endsnippet
#
# snippet "iutility" "→ #include <utility>" b
# #include <utility>
# endsnippet
#
# snippet "ieigen" "→ #include <Eigen/Dense>" b
# #include <Eigen/Dense>
# endsnippet
#
# snippet "istring" "→ #include <string>" b
# #include <string>
# endsnippet
#
# snippet "ifstream" "→ #include <fstream>" b
# #include <fstream>
# endsnippet
#
# snippet "ifuture" "→ #include <future>" b
# #include <future>
# endsnippet
#
# snippet "imemory" "→ #include <memory>" b
# #include <memory>
# endsnippet
#
# snippet "iutility" "→ #include <utility>" b
# #include <utility>
# endsnippet
#
# snippet "ilogger" "→ #include 'logger.h'" b
# #include "logger.h"
# endsnippet
#
# snippet "ipoint" "→ #include 'point.h'" b
# #include "point.h"
# endsnippet
#
# snippet "itimer" "→ #include 'timer.h'" b
# #include "timer.h"
# endsnippet
#
# snippet "iio" "→ #include 'io.h'" b
# #include "io.h"
# endsnippet
#
#
# snippet "to string" "→ to_string()" w
# std::to_string($1)
# endsnippet
#
# snippet "to integer" "→ std::stoi" w
# std::stoi($1)
# endsnippet
#
# snippet array "→ std::array" w
# std::array<$1
# endsnippet
#
# snippet future "→ std::future" w
# std::future<$1
# endsnippet
#
# snippet string "→ std::string" w
# std::string
# endsnippet
#
# snippet vector "→ std::vector" w
# std::vector<$1
# endsnippet
#
# snippet map "→ std::map" w
# std::unordered_map<
# endsnippet
#
# snippet stack "→ std::stack" w
# std::stack<$1
# endsnippet
#
# snippet stol "→ std::stol" w
# std::stol($1
# endsnippet
#
# snippet shared "→ std::std::shared_ptr" w
# std::shared_ptr<$1
# endsnippet
#
# snippet mshared "→ std::std::make_shared" w
# std::make_shared<$1
# endsnippet
#
#
# # DATA STRUCTURES:
# snippet class " + .h class" w
# #ifndef $1_H
# #define $1_H
#
# class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
#
# private:
#
# public:
#     $1();
# };
# #endif /* $1_H */
# endsnippet
#
# snippet namespace " + .h namespace" w
# #ifndef $1_H
# #define $1_H
#
# namespace ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
# }
# #endif /* $1_H */
# endsnippet
#
# # HANDY:
# snippet for "→ for loop" w
# for (int ${1:i} = 0; $1 < ${2:size}; $1++) {
# }
# endsnippet
#
# snippet fo "→ for loop" w
# for (auto& $1: $2) {
# }
# endsnippet
#
# snippet readint "→ std::cin int" w
# int n;
# std::cin >> n;
# std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
# endsnippet
#
# snippet readstr "→ std::cin string" w
# std::string str;
# getline(std::cin, str);
# endsnippet
#
# snippet "hello world" "→ template main.cpp" w
# #include <glog/logging.h>
# #include <gflags/gflags.h>
#
# #include <iostream>
# void initLogger(int& argc, char* argv[])
# {
#     google::ParseCommandLineFlags(&argc, &argv, true);
#     google::InitGoogleLogging(argv[0]);
#     google::SetLogDestination(google::GLOG_INFO, "Log.txt");
#     LOG(INFO) << "Logger successfully initialized";
# }
#
# int main(int argc, char* argv[])
# {
#     initLogger(argc, argv);
#
#     LOG(INFO) << "Hello world";
#     std::cin.ignore();
#     return 0;
# }
# endsnippet
