snippet cmake "+ cmake project"
# cmake spec
cmake_minimum_required(VERSION 3.10)

# project revision spec
project(${1:myproject})
set(MAJOR 0)
set(MINOR 1)
set(PROJECT_VERSION ${MINOR}.${MAJOR}) # never used?

# CXX spec
set(CMAKE_CXX_STANDARD 14)

# clang-tidy spec
set(CMAKE_CLANG_TIDY
    clang-tidy
    -checks=-*,readability-*,clang-analyzer-*,performance-*)

# export compile flags
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# cmake modules path spec
list(APPEND CMAKE_MODULE_PATH "$ENV{CMAKE_MODULE_PATH}")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# bin output path spec
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# project paths spec
set(PROJECT_DIR ${CMAKE_CURRENT_LIST_DIR})
set(INCLUDE_DIR ${PROJECT_DIR}/inc)
set(LIB_DIR ${PROJECT_DIR}/lib)
set(EXT_DIR ${PROJECT_DIR}/ext)
set(SRC_DIR ${PROJECT_DIR}/src)

# find lib dependencies
find_package(gflags REQUIRED)
find_package(glog REQUIRED)

# collect *all sources under ${SOURCES} var
set(SOURCES
    ${SRC_DIR}/)

# define project target
add_executable(${2:main}
    ${SRC_DIR}/main.cpp
    ${SOURCES})

# include *all header paths
target_include_directories(${2:main} PRIVATE
    ${INCLUDE_DIR}
    ${EXT_DIR})

# link *all symbols (function definitions)
target_link_libraries(${2:main}
    glog
    gflags)

# visually inspect project path vars
message(STATUS ${EXT_DIR})
message(STATUS ${SRC_DIR})
message(STATUS ${INCLUDE_DIR})
message(STATUS ${CMAKE_MODULE_PATH})
message(STATUS ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

# EARMARK: How to add personal libraries the right way:
# -----------------------------------------------------
# <https://stackoverflow.com/questions/31512485/cmake-how-to-set-up-source-library-and-cmakelists-txt-dependencies>

# 1. Add lib
# add_library(my_libname lib.cpp lib.h)

# 2. Link all library dependencies
# target_link_libraries(my_libname libother)

# 3. Link library to project target
# target_link_libraries(project_target my_libname)
endsnippet
